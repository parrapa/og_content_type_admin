<?php

/**
 * @file
 * Tests for og_content_type_admin.module.
 */

/**
 * Defines a base class for testing the og_content_type_admin feature.
 */
class OgContentTypeAdminFeatureTest extends DrupalWebTestCase {
  protected $web_user;

  public $publicFilesDirectory;

  /**
   * Info for the simpleTest UI.
   */
  public static function getInfo() {
    return array(
      'name' => 'Og Content Type Admin feature test',
      'description' => 'Test the Og Content Type Admin feature to ensure it works as intended.',
    );
  }

  /**
   * Configure environment: declare modules, users, permissions...
   */
  public function setUp() {
    $this->profile = 'multisite_drupal_communities';
    parent::setUp(array('og_content_type_admin', 'i18n_string'));
    node_access_rebuild();
  }

  /**
   * Verify that current user has no access to page.
   */
  public function ogcontenttypeadminVerifyNoAccess($url) {
    // Test that page returns 403 Access Denied.
    $this->drupalGet($url);
    $this->assertResponse(403, 'Expected -> Access Denied');
  }

  /**
   * Verify that current user has access to page.
   */
  public function ogcontenttypeadminVerifyAccess($url) {
    // Test that page returns 200 Access OK.
    $this->drupalGet($url);
    $this->assertResponse(200, 'Expected -> Access OK');
  }

  /**
   * Check the access to the og content type admin configuration page.
   */
  public function testogcontenttypeadminBehavior() {
    // Verify that anonymous users can't access to the og content
    // type admin configuration page.
    $this->ogcontenttypeadminVerifyNoAccess('admin/config/group/og_content_types');

    // Create a regular user and login.
    $web_user_register = $this->drupalCreateUser();
    $this->drupalLogin($web_user_register);
    // Verify that authenticated users can't access to the
    // og content type admin configuration page.
    $this->ogcontenttypeadminVerifyNoAccess('admin/config/group/og_content_types');

    // Create a user with permissions to access to the og
    // content type admin configuration page.
    $web_user = $this->drupalCreateUser(array(
      'administer site configuration', 'access administration pages', 'administer nodes',
      'access content overview', 'administer og content types', 'bypass workbench moderation'));
    $this->drupalLogin($web_user);

    // Create a node of a "Community" content-type.
    $this->drupalGet('node/add/community');
    $community = array();
    $community['type'] = 'community';
    $community['status'] = 1;
    $community['uid'] = $this->loggedInUser->uid;
    $community['title'] = $this->randomName(8);
    $community['body'] = array('und' => array('0' => array('value' => $this->randomName(16))));
    $community['group_access'] = array('und' => array('0' => array('value' => 1)));
    $community['og_roles_permissions'] = array('und' => array('0' => array('value' => 1)));
    $community['workbench_moderation_state_new'] = workbench_moderation_state_published();
    $this->group1 = $this->drupalCreateNode($community);

    // Check if we have access to manage content types of node.
    $this->drupalGet('node/' . $this->group1->nid . '/ogct');
    $this->assertText(t('Group Content Types'), '"Group Content Types" management tab exists in the group page');

    // Change user.
    $this->drupalLogin($web_user_register);
    $this->ogcontenttypeadminVerifyNoAccess('node/' . $this->group1->nid . '/ogct');

    // Login as admin user.
    $perms = user_role_permissions(array(array_search('administrator', user_roles()) => 'administrator'));
    $perms = array_keys($perms[array_search('administrator', user_roles())]);
    foreach ($perms as $id => $perm) {
      if ($perm == 'access toolbar' || $perm == 'configure sweaver' || $perm == 'use editor') {
        unset($perms[$id]);
      }
    }
    $admin = $this->drupalCreateUser($perms);
    $this->drupalLogin($admin);

    // Check access.
    $this->ogcontenttypeadminVerifyAccess('admin/config/group/og_content_types');
    $this->assertText(t('@title', array('@title' => $community['title'])));

    // Add community as group.
    $parameters = array();
    $parameters['group'] = $this->group1->nid;
    $this->drupalPost('admin/config/group/og_content_types', $parameters, "Add group");
    $this->assertText(t('The group has been added'));
  }
}
